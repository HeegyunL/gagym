package com.git.partnerMq.partner;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.git.partnerMq.Result;



@RestController
public class PartnerController {
	private PartnerService service;

	public PartnerController(PartnerService service) {
		this.service = service;
	}

	@PostMapping(value = "/partner")
	public PartnerCreateResponse addPartner(@RequestBody PartnerCreateRequest PartnerRequest) {

		// 데이터 검증

		// DB에 저장할 객체 생성
		Partner partner = Partner.builder()
				.gymName(PartnerRequest.getGymName()).gymCoNum(PartnerRequest.getGymCoNum()).gymLocateSi(PartnerRequest.getGymLocateSi())
				.gymLocateGunGu(PartnerRequest.getGymLocateGunGu()).gymAddress(PartnerRequest.getGymAddress()).gymPhoneNum(PartnerRequest.getGymPhoneNum())
				.gymTime(PartnerRequest.getGymTime()).gymService(PartnerRequest.getGymService())
				.gymPhoto(PartnerRequest.getGymPhoto()).fileType(PartnerRequest.getFileType())
				.fileName(PartnerRequest.getFileName())
				.gym1DayPrice(PartnerRequest.getGym1DayPrice())
				.gym3DayPrice(PartnerRequest.getGym3DayPrice()).gym7DayPrice(PartnerRequest.getGym7DayPrice())
				.gym3MonthPrice(PartnerRequest.getGymMonthPrice()).gym3MonthPrice(PartnerRequest.getGym3MonthPrice()).gym6MonthPrice(PartnerRequest.getGym6MonthPrice())
				.gymYearPrice(PartnerRequest.getGymYearPrice())
				.build();

		// DB에 저장
		// repo.save(product)

		// (event)외부 시스템에 추가된 데이터 보내기
		service.sendPartner(partner);

		return PartnerCreateResponse.builder().partner(partner).result(new Result("00", "정상적으로 생성")).build();
	}
}