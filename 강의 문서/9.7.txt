- 디지털 디자인(디지털 논리회로 설계)
- 디지털 컨버전스(스마트폰이전, MP3, PMP)
   -> IT컨버전스, 융합SW

//자바 개발자 = 디자이너(설계자) ->클래스를 설계
	-> 클래스 구조로 객체를 만들기 위함
	-> 재사용성의 관점 - > 같은 구조로 여러개 만들자??
	->학사관리시스템  -  
	   ->수강신청, 시간표, 담당교수
	   -> 학생정보, 
//타입스크립트 개발자도 디자이너 ?? => 타입 설계
//SW설계 => 구조(Structure)를 만드는 것
//디자인(Design) : 코드레벨
//아키텍트(Architect) : 시스템레벨 , high-level

//순차처리 흐름일때 디버깅
-breakpoint(중단점)를 코드를 멈춰서 실행할 코드라인에 ㅉ기음
-debug 모드를 실행
-step over(다음줄 실행) , step into(메서드 내부로 들어가서 실행)
- step into( 


//UML(Unified Modeling Language)
: 통합적인 설계 언어
: 국제 표준 지정, 설계 방법

Forward Engineering
 : 설계 -> 코드

Reverse Engineering
 : 코드 -> 설계


//Class Diagam
Class Daigram 예시 
Member class 객체를 MemberExample에서 생성(intantiation)
:클래스 : 구조
: 객체, 인스턴스 = 구조로 만들어낸 것
-----------------------------------------
1.클래스의 캡슐화(encapsulation)를 표현
 - 캡슐화 : 필드, 메서드로 클래스를 표현
  -> 공학적인 일반화 : 속성과 기능으로 구조를 만듦
2.클래스 간의 관계(relationship)를 표현
 - Dependency (의존 관계) :  클래스 변동사항이 다른 클래스에 영향을 미침
  -> 클래스를 변경하면 클래스를 가져다 쓰는 쪽에 영향을 미침
	 -예 ) MemberExample 이 Member 클래스에 의존성이 있음
	-> Member클래스를 수정하면 MemberExample에 영향을 미칠 수 있음
  -> 자바(코드) : 
	1.메서드에서 다른 클래스 객체를 생성해서 사용함
	2.메서드의 매개변수로 다른 클래스 객체를 받음
	-의존 객체를 외부에서 생성해서 메서드 매개변수로 넣어줌
	 -> 의존성 주입(Dependency Injection)
  -UML표기법은 --------->
	-<<instantiate>>,<<use>> : 스테레오타입(Stereo type)
	- > 기본 UML표기법 외에 추가적인 내용을 입력하는 방법

클래스 설계 : UML, Class Diagram
글래스 구현 : calculator
클래스 사용 : calculator Example
